generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Supplier {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String            @unique
  phone     String            @unique
  address   String?
  country   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  SupplierProduct[]
  @@map("suppliers")
}

model Product {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  suppliers   SupplierProduct[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  @@map("products")
}

model SupplierProduct {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  supplierId  String    @db.ObjectId
  productId   String    @db.ObjectId
  supplier    Supplier  @relation(fields: [supplierId], references: [id], onDelete:Cascade)
  product     Product   @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt  
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  hashedPassword String?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}